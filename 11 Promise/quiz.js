// –ó–∞–¥–∞—á–∞ 1. –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ Promise

function getSmth(num) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(num * num), 1000);
  });
}

async function func() {
  let arr = [1, 2, 3, 4, 5];
  let sum = 0;

  for (let elem of arr) {
    console.log("elem: ", elem);
    sum += await getSmth(elem);
  }

  console.log("sum", sum);
}
// console.log("start");
// func();

//------------------------------------------------------

// var p3 = new Promise(function (resolve, reject) {
//   resolve("B");
// });

// var p1 = new Promise(function (resolve, reject) {
//   resolve(p3);
// });

// var p2 = new Promise(function (resolve, reject) {
//   resolve("A");
// });

// p1.then(function (v) {
//   console.log(v);
// });

// p2.then(function (v) {
//   console.log(v);
// });

//------------------------------------------------------

// –ó–∞–¥–∞—á–∞ 2. –í—Å–µ –ø—Ä–æ–º–∏—Å—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å –∏–Ω—Ç—Ä–µ–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫.
// –°–µ–π—á–∞—Å –ø–æ—è–≤–ª—è—é—Ç—Å—è 3 –º–∞—Å—Å–∏–≤–∞ —Å—Ä–∞–∑—É, –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ —Å 1 —ç–ª–µ–º–µ–Ω—Ç–æ–º, –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ —Å –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —Ç.–¥

// console.time("test");

const myPromise1 = new Promise((resolve) =>
  setTimeout(() => {
    resolve("I'm done-3000");
  }, 3000),
);

const myPromise2 = new Promise((resolve) =>
  setTimeout(() => {
    resolve("Me too!-1500");
  }, 1500),
);

const myPromise3 = new Promise((resolve) =>
  setTimeout(() => {
    resolve("Finished!-1000");
  }, 1000),
);

const myPromise4 = new Promise((resolve) =>
  setTimeout(() => {
    resolve("2000!");
  }, 2000),
);

// function handlePromises(...args) {
//   const results = [];

//    results.push(await myPromise1);
//   console.log(results);

//   results.push(await myPromise2);
//   console.log(results);

//   results.push(await myPromise3);
//   console.log(results);
// }

// handlePromises(myPromise1, myPromise2, myPromise3);
// console.timeEnd("test");

// **************--–†–µ—à–µ–Ω–∏–µ--*******************

/* const myPromise1 = function name(params) {
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve("I'm done 1000");
    }, 100),
  );
};

const myPromise2 = function name(params) {
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve("Me too! 2000");
    }, 200),
  );
};

const myPromise3 = function name(params) {
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve("Finished! 3000");
    }, 300),
  );
}; */

async function handlePromises(...args) {
  const results = [];

  results.push(await myPromise1);
  console.log(results);

  results.push(await myPromise2);
  console.log(results);

  results.push(await myPromise3);
  console.log(results);
}

// handlePromises(myPromise1, myPromise2, myPromise3);
// console.timeEnd("test");

// –ó–∞–¥–∞—á–∞ 3 –°—É–º–º–∞ –¥–≤—É—Ö –ø—Ä–æ–º–∏—Å–æ–≤

// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sum, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –¥–≤–∞ –ø—Ä–æ–º–∏—Å–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ª–µ–∂–∞—Ç —á–∏—Å–ª–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –ø—Ä–æ–º–∏—Å —Å —Å—É–º–º–æ–π —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–º–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è.

// const p1 = new Promise((resolve) => resolve(1));
// const p2 = new Promise((resolve) => resolve(2));

// sum(p1, p2).then((result) => {
//   console.log("sum", result); // 1 + 2 === 3
// });

// ==================--–†–µ—à–µ–Ω–∏–µ--====================

// –í–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–º–∏—Å–∞

// function sum(p1, p2) {
//   return Promise.all([p1, p2]).then(([val1, val2]) => {
//     return new Promise((resolve) => resolve(val1 + val2)).then((result) => {
//       return result;
//     });
//   });
// }

// –í–∞—Ä–∏–∞–Ω—Ç –Ω–∞ async/await

// async function sum2(p1, p2) {
//   const n1 = await p1; // –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
//   const n2 = await p2; // –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
//   return n1 + n2; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–º–∏—Å
// }
// sum2(p1, p2).then((result) => {
//   console.log("sum2", result); // 1 + 2 === 3
// });

// –ó–∞–¥–∞—á–∞ 3 –°—É–º–º–∞ –¥–≤—É—Ö –ø—Ä–æ–º–∏—Å–æ–≤

// const p1 = new Promise((resolve) => resolve(1));
// const p2 = new Promise((resolve) => resolve(2));
// const p3 = new Promise((resolve) => resolve(3));

// ==================--–†–µ—à–µ–Ω–∏–µ--====================

// –í–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –ø—Ä–æ–º–∏—Å–∞—Ö

// function sum(...args) {
//   return Promise.all(args).then((arrRes) => {
//     return arrRes.reduce((prev, current) => prev + current, 0);
//   });
// }

// sum().then(console.log); // 0
// sum(p1).then(console.log); // 1
// sum(p1, p2).then(console.log); // 3
// sum(p1, p2, p3).then(console.log); // 6

// –í–∞—Ä–∏–∞–Ω—Ç –Ω–∞ async/await

// async function sum2(...args) {
//   const arrRes = await Promise.all(args);
//   return arrRes.reduce((prev, current) => prev + current, 0);
// }

// sum2().then(console.log); // 0
// sum2(p1).then(console.log); // 1
// sum2(p1, p2).then(console.log); // 3
// sum2(p1, p2, p3).then(console.log); // 6

// –ó–∞–¥–∞—á–∞ 4 –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é and, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø—Ä–æ–º–∏—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å.

// –ï—Å–ª–∏ –æ–±–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–∞ —Ä–µ–∑–æ–ª–≤—è—Ç—Å—è, –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∑–æ–ª–≤–Ω—É—Ç—å—Å—è.
// –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ —Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—Å—è, –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å —Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—Å—è.

// –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –º–æ–∂–µ—Ç —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –∏–ª–∏ —Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—å—Å—è –ª—é–±—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, —ç—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.

// ==================--–†–µ—à–µ–Ω–∏–µ--====================

// async function and(p1, p2) {
//   return await Promise.all([p1, p2]).then((result) => result);
// }

// and(Promise.resolve(1), Promise.resolve(2)).then(
//   () => console.log("fulfilled"), // ‚úì
//   () => console.log("rejected"),
// );

// and(Promise.reject(1), Promise.resolve(2)).then(
//   () => console.log("fulfilled"),
//   () => console.log("rejected"), // ‚úì
// );

// –ó–∞–¥–∞—á–∞ 5 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤

// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é countFulfilledPromises, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∏—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å,
// –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –ø—Ä–æ–º–∏—Å–æ–≤.

// const p1 = new Promise((resolve) => resolve(11));
// const p2 = new Promise((resolve) => resolve(22));
// const p3 = new Promise((_, reject) => reject(33));

// countFulfilledPromises().then(console.log); // 0
// countFulfilledPromises(p1).then(console.log); // 1
// countFulfilledPromises(p1, p2).then(console.log); // 2
// countFulfilledPromises(p1, p2, p3).then(console.log); // 2
// countFulfilledPromises(p1, p3).then(console.log); // 1
// countFulfilledPromises(p3).then(console.log); // 0

// ==================--–†–µ—à–µ–Ω–∏–µ--====================

// async function countFulfilledPromises(...promises) {
//   return Promise.allSettled(promises).then((results) => results.filter(({ status }) => status === "fulfilled").length);
// }

// –ó–∞–¥–∞—á–∞ 6 Promise.race
// –°–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–∏—Ñ–∏–ª–æ–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–∏—Ñ–∏–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Promise.race.

// –ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç race
// –§—É–Ω–∫—Ü–∏—è race –ø—Ä–∏–Ω–∏–º–∞–µ—Ç iterable, –Ω–∞–ø—Ä–∏–º–µ—Ä, Array –∏–ª–∏ Set. –£ iterable –Ω–µ—Ç –¥–ª–∏–Ω—ã, –Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º for-of.

// –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç race
// –§—É–Ω–∫—Ü–∏—è race –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
// –ï—Å–ª–∏ –≤ iterable –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –ø—Ä–æ–º–∏—Å–æ–º, —Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∑–∞—Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø–µ—Ä–≤—ã–º –∏–∑ –Ω–∏—Ö.

// let rand = (name) => {
//   const time = Math.random() * 2000;
//   console.log(`time: ${name}`, time);
//   return time;
// };

// let p1 = new Promise((r) => setTimeout(r, rand("A"), "A"));
// let p2 = new Promise((r) => setTimeout(r, rand("B"), "B"));
// let p3 = new Promise((r) => setTimeout(r, rand("C"), "C"));
// let p4 = new Promise((r) => setTimeout(r, rand("D"), "D"));

// ==================--–†–µ—à–µ–Ω–∏–µ--====================

// function race(promises) {
//   return new Promise((resolve, reject) => {
//     let settled = false;

//     promises.forEach((promise) => {
//       Promise.resolve(promise)
//         .then((value) => {
//           if (!settled) {
//             settled = true;
//             resolve(value);
//           }
//         })
//         .catch((error) => {
//           if (!settled) {
//             settled = true;
//             reject(error);
//           }
//         });
//     });

//     // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –ø—Ä–æ–º–∏—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è
//   });
// }

// race([p1, p2, p3, 'p4']).then(
//   (value) => console.log("1 >>>", value),
//   (reason) => console.log("2 >>>", reason),
// );

// ==================--–†–µ—à–µ–Ω–∏–µ 2--====================
// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Promise.all.

// –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ –ø—Ä–æ–º–∏—Å–∞:

// p1 —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º "üçé" —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
// p2 —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º "üçã" —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
// p3 —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º "üçâ" —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
// –§—É–Ω–∫—Ü–∏—è all –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å. –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –æ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤.
// –ü–æ—Ä—è–¥–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –ø—Ä–æ–º–∏—Å–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ.

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–º–∏—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω—É—Ç rejected.

/*
function all(promises) {
  return new Promise(async (resolve, reject) => {
    const results = [];

    for (let promise of promises) {
      results.push(await Promise.resolve(promise));
    }
    resolve(results);
  });
}
  */

// function all(promises) {
//   return new Promise((resolve, reject) => {
//     const results = new Array(promises.length);
//     let completed = 0;

//     promises.map((promise, idx) => {
//       Promise.resolve(promise).then((result) => {
//         results[idx] = result;
//         if (++completed === promises.length) resolve(results);
//       });
//     });
//   });
// }

// function all(promises) {

//   return new Promise((resolve) => {
//     const results = new Array(promises.length);
//     let completed = 0;

//     promises.map((promise, index) => {
//       Promise.resolve(promise).then(value => {
//         results[index] = value;
//         if (++completed === promises.length) resolve(results);
//       });
//     });
//   });
// }

// –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// rand = () => Math.random() * 2000;

// p1 = new Promise((r) => setTimeout(r, rand(), "A"));
// p2 = new Promise((r) => setTimeout(r, rand(), "B"));
// p3 = new Promise((r) => setTimeout(r, rand(), "C"));
// p4 = new Promise((/* _, */ r) => setTimeout(r, rand(), "D"));

// all([p1, p2, p3, p4]).then(
//   (value) => console.log("1 >>>", value),
//   (reason) => console.log("2 >>>", reason),
// );

/*

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

all –ø—Ä–∏–Ω–∏–º–∞–µ—Ç iterable, –Ω–∞–ø—Ä–∏–º–µ—Ä, Array –∏–ª–∏ Set.
–≠–ª–µ–º–µ–Ω—Ç–∞–º–∏ —ç—Ç–æ–≥–æ iterable –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–º–∏—Å–æ–º –∏–ª–∏ –Ω–µ –ø—Ä–æ–º–∏—Å–æ–º.
–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ iterable –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–∏—Å–æ–º, —Ç–æ –æ–Ω–æ –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç.
–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–º–∏—Å–æ–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –ø—Ä–æ–º–∏—Å—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ iterable.
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π iterable, –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.
–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–∏—Å —Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—Å—è, –∫–æ–≥–¥–∞ —Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—Å—è –ª—é–±–æ–π –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤, –∑–Ω–∞—á–µ–Ω–∏–µ–º —ç—Ç–æ–≥–æ —Ä–µ–¥–∂–µ–∫—Ç–Ω—É—Ç–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞.

*/

// function all(promises) {
//   const arrPromises = Array.from(promises);

//   if (arrPromises.length === 0) return Promise.resolve([]);

//   return new Promise((resolve, reject) => {
//     const results = [];
//     let completed = 0;

//     arrPromises.forEach((promise, idx) => {
//       Promise.resolve(promise)
//         .then((result) => {
//           results[idx] = result;
//           if (++completed === arrPromises.length) resolve(results);
//         })
//         .catch((error) => reject(error));
//     });
//   });
// }

// –ó–∞–¥–∞—á–∞ 7 –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ then
// –î–∞–Ω—ã –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø—Ä–æ–º–∏—Å—ã:
// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —á—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
// –ø—Ä–æ–º–∏—Å —Ñ—É–Ω–∫—Ü–∏–∏ first —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π 'first' —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
// –ø—Ä–æ–º–∏—Å —Ñ—É–Ω–∫—Ü–∏–∏ second —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π 'second' —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

const first = () => new Promise((r) => setTimeout(r, 1000, "first"));
const second = () => new Promise((r) => setTimeout(r, 2000, "second"));

// –ü—Ä–∏–º–µ—Ä 1

// first()
//   .then(function () {
//     return second();
//   })
//   .then(console.log);

// 3—Å–µ–∫ "second"

// –ü—Ä–∏–º–µ—Ä 2

// first()
//   .then(function () {
//     second();
//   })
//   .then(console.log);
// 1—Å–µ–∫ undefined

// –ü—Ä–∏–º–µ—Ä 3

// first().then(second()).then(console.log);
//  –ï—Å–ª–∏ –¥–ª—è Promise "first", –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ then, –∏ —É –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ second(),
//  —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ then –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ Promise ("first"), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ then –±—ã–ª –≤—ã–∑–≤–∞–Ω.
// –ü–µ—Ä–≤—ã–π then –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ second(), —Ç.–∫. —ç—Ç–æ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ö–æ–¥—è—â–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –¥–æ–∂–∏–¥–∞—Ç—å—Å—è –∏ –Ω–µ –ø—Ä–æ–º–∏—Å –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–∏–¥–∞—Ç—å—Å—è
// 1—Å–µ–∫ "first"

// –ü—Ä–∏–º–µ—Ä 4

 first().then(second).then(console.log);
// 3—Å–µ–∫ "second"