/*

--2.1--

атрибуты <script>:

    src:
        - Указывает путь к внешнему JavaScript-файлу
        - Если указан атрибут src, содержимое тега <script> игнорируется
        - /path/to/script.js – это абсолютный путь от корневой папки до необходимого файла
        - src="script.js" или src="./script.js" относительный путь от текущей страницы. Будет означать, что файл "script.js" находится в текущей папке
        - src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js"> полный URL-адрес

        Для подключения нескольких скриптов используйте несколько тегов:

        <script src="/js/script1.js"></script>
        <script src="/js/script2.js"></script>

        Польза отдельных файлов в том, что браузер загрузит скрипт отдельно и сможет хранить его в кеше.
        Другие страницы, которые подключают тот же скрипт, смогут брать его из кеша вместо повторной загрузки из сети.
        На практике это ведет к тому, что в какой-то момент при редактировании кода браузер будет применять предыдущую версию кода, а не вашу текущую.
         - можно чистить кеш браузера
         - <script src="script.js?v=1"></script> - Когда браузер кеширует файл, вам просто нужно будет увеличить номер на единицу.

    type:
         - type="text/javascript" устарел

    language:
             - language="JavaScript" Указание языка JavaScript
             - language="VBScript" Указание языка VBScript
             - language="JavaScript1.2" версия JavaScript, например, JavaScript1.2
             Если атрибут language используется в современном браузере, он будет проигнорирован, а скрипт выполнится как обычный JavaScript


*** Задача: Создайте страницу, которая отобразит сообщение «Я JavaScript!».

--2.2--

Точка с запятой.

    точка с запятой используется чтоб отделить инструкции для JS.

    JavaScript интерпретирует перенос строки как «неявную» точку с запятой. Это называется автоматическая вставка точки с запятой.

    return
    a + b

    преобразуется путем автоматической вставки точки с запятой в следующее:
    return;
    a + b;

    a = b
    ++c

    преобразуется путем автоматической вставки точки с запятой в следующее:
    a = b;
    ++c;



    JavaScript не вставляет точку с запятой:

    1. перед квадратными скобками [...]

        alert('Hello')

        [1, 2].forEach(alert);

        преобразуется в:  alert('Hello')[1, 2].forEach(alert);

    2. перед круглой скобкой

        function name() {
            console.log("function:name");
        };

        name
        (1, 2); //  вызовет функцию name

    3. если строка заканчивается знаком оператором значит, это «незавершённое выражение», поэтому точка с запятой не требуется.
        alert(3 +
        1
        + 2); // 6

Коментарии:

    1. Однострочные комментарии начинаются с двойной косой черты //
    2. Многострочные комментарии начинаются косой чертой со звёздочкой /* и заканчиваются звёздочкой с косой чертой
    3. Вложенные комментарии /* не поддерживаются

--2.3--

"use strict" - строгий режим
    ECMAScript5

    в режиме "use strict" будут ошибки:

    x = 5; // error

    let x = 5;
    delete x; // error

    function sum(a, a) {} // error

    Запрет на дублирование имен свойств в объектных литералах:
        'use strict';
        const obj = {
            a: 1,
            a: 2 // Ошибка! Дублирующееся имя свойства.
        };

    защищает свойства writable: false они доступным только для чтения
    const obj = {};
    Object.defineProperty(obj, 'x', { value: 0, writable: false }); // Object.defineProperty определяет новое или изменяет существующее свойство объекта и возвращает этот объект
    obj.x = 1; // error

    В строгом режиме this в глобальном контексте становится undefined, а не объектом window или global.
    'use strict';
    console.log(this); // undefined

--2.4--


    var
    let
    const

    x=5;

    - разрешенные имена: из латинских букв, чисел, символов $ и знаков подчеркивания

        примеры: str, my_str, myStr, a1, $, $a, $$a.

    - запрещенные имена:

        let 1a; // не может начинаться с цифры
        let my-name; // дефис '-' не разрешён в имени
        let, class, return и function - зарезервированные имена
        let let = 5; // нельзя назвать переменную "let", ошибка!
        let return = 5; // также нельзя назвать переменную "return", ошибка!

    - регистр имеет значение: apple и APPLE – это две разные переменные.


    - можно использовать любой язык, включая кириллицу или даже иероглифы, например:

    let имя = '...';
    let 我 = '...';

    Повторное объявление вызывает ошибку.

        let message = "Это";

        let message = "Другое"; // SyntaxError: 'message' has already been declared

*/
let x = "variable";
let r = x;
console.log(r); // "variable"

let planetName = "Earth";

const IDX = 123;
