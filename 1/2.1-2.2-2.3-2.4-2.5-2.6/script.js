/*

--2.1--

Тег <script> используется для вставки и выполнения скриптов на веб-страницах, в любое место HTML-документа.

атрибуты <script>:

    src:
        - Указывает путь к внешнему JavaScript-файлу
        - Если указан атрибут src, содержимое тега <script> игнорируется
        - /path/to/script.js – это абсолютный путь от корневой папки до необходимого файла
        - src="script.js" или src="./script.js" относительный путь от текущей страницы. Будет означать, что файл "script.js" находится в текущей папке
        - src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js"> полный URL-адрес

        Для подключения нескольких скриптов используйте несколько тегов:

        <script src="/js/script1.js"></script>
        <script src="/js/script2.js"></script>

        Польза отдельных файлов в том, что браузер загрузит скрипт отдельно и сможет хранить его в кеше.
        Другие страницы, которые подключают тот же скрипт, смогут брать его из кеша вместо повторной загрузки из сети.
        На практике это ведет к тому, что в какой-то момент при редактировании кода браузер будет применять предыдущую версию кода, а не вашу текущую.
         - можно чистить кеш браузера
         - <script src="script.js?v=1"></script> - Когда браузер кеширует файл, вам просто нужно будет увеличить номер на единицу.

    type:
         - type="text/javascript" устарел

    language:
             - language="JavaScript" Указание языка JavaScript
             - language="VBScript" Указание языка VBScript
             - language="JavaScript1.2" версия JavaScript, например, JavaScript1.2
             Если атрибут language используется в современном браузере, он будет проигнорирован, а скрипт выполнится как обычный JavaScript


*** Задача: Создайте страницу, которая отобразит сообщение «Я JavaScript!».

--2.2--

Точка с запятой.

    точка с запятой используется чтоб отделить инструкции для JS.

    JavaScript интерпретирует перенос строки как «неявную» точку с запятой. Это называется автоматическая вставка точки с запятой.

    return
    a + b

    реобразуется путем автоматической вставки точки с запятой в следующее:
    return;
    a + b;

    a = b
    ++c

    преобразуется путем автоматической вставки точки с запятой в следующее:
    a = b;
    ++c;



    JavaScript не вставляет точку с запятой:

    1. перед квадратными скобками [...]

        alert('Hello')

        [1, 2].forEach(alert);

        преобразуется в:  alert('Hello')[1, 2].forEach(alert);

    2. перед круглой скобкой

        function name() {
            console.log("function:name");
        };

        name
        (1, 2); //  вызовет функцию name

    3. если строка заканчивается знаком оператором значит, это «незавершённое выражение», поэтому точка с запятой не требуется.
        alert(3 +
        1
        + 2); // 6

Коментарии:

    1. Однострочные комментарии начинаются с двойной косой черты //
    2. Многострочные комментарии начинаются косой чертой со звёздочкой /* и заканчиваются звёздочкой с косой чертой
    3. Вложенные комментарии /* не поддерживаются

--2.3--

"use strict" - строгий режим
    Этот режим заставляет браузер использовать все современные возможности языка.
    "use strict" команда должна находиться в начале скрипта

    Нет никакого способа отменить use strict

--2.4--

Переменная - переменная представляет собой контейнер, в котором мы можем хранить какие-либо данные.

    let – это современный способ объявления.
    var – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от let в главе
        Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.
    const – похоже на let, но значение переменной не может изменяться.

    - разрешенные имена: из латинских букв, чисел, символов $ и знаков подчеркивания

        примеры: str, my_str, myStr, a1, $, $a, $$a.

    - запрещенные имена:

        let 1a; // не может начинаться с цифры
        let my-name; // дефис '-' не разрешён в имени
        let, class, return и function - зарезервированные имена
        let let = 5; // нельзя назвать переменную "let", ошибка!
        let return = 5; // также нельзя назвать переменную "return", ошибка!

    - регистр имеет значение: apple и APPLE – это две разные переменные.


    - можно использовать любой язык, включая кириллицу или даже иероглифы, например:

    let имя = '...';
    let 我 = '...';

    Повторное объявление вызывает ошибку.

        let message = "Это";

        let message = "Другое"; // SyntaxError: 'message' has already been declared

--2.5--

Типы данных

    Есть 8 основных типов данных в JavaScript.

    number - Числовой тип данных представляет как целочисленные значения, так и числа с плавающей точкой.
    в диапазоне от 2 в 253 стпепени до минус 2 в 253 стпепени. Иначе при больших числах будет ошибка точности.

        Infinity представляет собой математическую бесконечность. Это особое значение, которое больше любого числа.
        alert( 1 / 0 ); //  при делении на ноль получается Infinity
        alert( Infinity ); // Infinity

        NaN - означает что произошла ошибка при математической операции с числами

        alert( "не число" / 2 ); // NaN, такое деление является ошибкой
        Любая математическая операция с NaN возвращает NaN, за исключением
        аlert(NaN ** 0); // 1 Оператор возведения в степень (**)

    BigInt -

        // символ "n" в конце означает, что это BigInt
        const bigInt = 1234567890123456789012345678901234567890n;

    string - создается при помощи 3 видов кавычек '' "" ``

        let str = "Привет";
        alert( `Привет, ${name}!` ); // Привет, Иван!

    boolean - может принимать только два значения: true (истина) и false (ложь).

    null - В JavaScript null не является «ссылкой на несуществующий объект»
           представляет собой «ничего», «пусто» или «значение неизвестно».

            Результат typeof null === "object" является историческим артефактом, возникшим из-за особенностей первоначальной реализации JavaScript в 1995 году.

            Внутреннее представление типов:

            - В ранней реализации JavaScript для идентификации типов данных использовалась система "типовых тегов" (type tags),
            которая использовала младшие биты в двоичном представлении значения.
            - Объекты имели типовой тег с префиксом 000, а null — представляющий "пустой" или "несуществующий объект" — получил тот же самый типовой тег, 000.
            - Это привело к ошибочной классификации null как объекта на внутреннем уровне.

            Роль оператора typeof:

            - Оператор typeof был разработан для чтения этих типовых тегов.
            - При встрече с null он видит тот же тег 000, что и у объектов, и возвращает "object", даже несмотря на то, что null на самом деле объектом не является.

            Почему это не было исправлено?

            - Когда эта проблема была признана багом, значительное количество кода уже полагалось на поведение typeof null === "object".
            - Исправление этого поведения привело бы к массовым проблемам с совместимостью, что сломало бы существующие сайты и приложения.
            - Поэтому это поведение оставили в языке для обеспечения обратной совместимости.

    undefined - Оно означает, что «значение не было присвоено».

        let age;

        alert(age); // выведет "undefined"


    object - В объектах хранят коллекции данных или более сложные структуры.

    symbol - используется для создания уникальных идентификаторов в объектах.


    Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

    Имеет две формы:
    - typeof x;
    - typeof(x);

    Возвращает строку с именем типа. Например, "function".
    Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.

    Таблица всех случаев:
        Значение	            Тип
    undefined	            "undefined"
    true, false	            "boolean"
    42, NaN, Infinity	    "number"
    10n	                    "bigint"
    "hello", 'world'	    "string"
    Symbol("id")	        "symbol"
    {}, [], null	        "object"
    function example() {}	"function"


--2.6--

    модальное блокирует выполнение скриптов и блокирует браузер недавая взаимодействовать с интерфейсом


    alert

        alert("Hello");
        - невозможно кастомизировать дизайн
        - имеет только 1 кнопку, ограничен функциональность


    prompt
        Функция prompt принимает два аргумента:

        result = prompt(title, [default]);
        Этот код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK/Отмена.

        title
            Текст для отображения в окне.
        default
            Необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.

        result:
         - в случае ввода, результат ввода в виде текста
         - в случае отмены значением result станет null

    confirm

        confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
        confirm возвращает true/false при ок/отмена

        result = confirm(question);

    alert,prompt,confirm - только для браузера.
    находятся в глобальном объекте window








        */
